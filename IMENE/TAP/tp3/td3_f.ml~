(* TD3: Programmation fonctionnelle et générique *)
(* Exercice 1: Curryfication et généricité *)
(* 1.1 *)
let triplet (x ,y ,z) = y;;
(* 1.2 *)  
let curry f =
     fun x y -> f (x, y) ;;
  
let uncurry f =
  fun (y ,x) -> f y x ;;

(* 1.3 *)
let inverse f x=
    fun g -> f g x;;

(* 1.4 *)
let rec iterate f x n =
  if n=0 then
    x
  else
    iterate f (f x) (n-1) ;;

(* Exercice 2: Listes d'associations génériques *)
(* 2.1: En OCaml, le type de données générique associé à une telle liste est: "(int * int) list" *)
let lmap = [(1,2)];;

  
(* Fonction qui compte la taille d'une liste *)
open List;;
let rec length list =
  if list = [] then
    0
  else
    1 + length(List.tl list);;
  
(* 2.2: Nous avons utilisé la récursivité, on s'arréte si notre liste est vide, sinon on parcours la liste en regardant si le couple en tête de liste à comme clé "key", si c'est le cas on fait appel a la fonction avec comme paramêtres "key" et "List.tl list" qui est le tail de la liste, si ce n'est pas le cas, on insert la tête de liste à l'appel récursive de la fonction *)  
let rec list_remove key list =
  match list with
    |[] -> []
    |hd::tl ->
    begin
      if (fst (List.hd list)) = key then
        list_remove key (List.tl list)
      else
        (List.hd list)::(list_remove key (List.tl list)) 
    end
;;
  
(* 2.3: La condition d'arret est la liste vide, on applique la fonction en paramétre au couple en tête de liste et en l'insert à l'appel de la fonction récusive avec comme paramêtres "f" et "List.tl list" *)
let rec list_map f list =
  match list with
  |[] -> []
  |hd::tl ->
     begin
       f (List.hd list)::(list_map f (List.tl list))
     end
;;


(* 2.4: Si l1 est une liste vide, alors le résultat est l2, si l2 est vide, alors on retourne l1, si les deux liste sont vides, le résultat est une liste vide, sinon on extrait la tête de liste de l2 et on l'insert dans l'appel récursive de la fonction avec comme paramêtres l1 et le tail de l2*)
let rec myConcat l1 l2 =
  if l1 = [] then
    l2
  else if l2 = [] then
    l1
  else if l1 = [] && l2 = [] then
    []
  else
    begin
      (List.hd l2)::(myConcat l1 (List.tl l2))
    end
;;

(* Exercice 3: Objets-enregistrements *)
(* 1.1 *)
type complex = {
  a   : float; 
  b : float;
  add : complex -> complex;
  mul : complex -> complex
  };;  

(* 1.2 *)

let rec complexConstructor a b ={
    a = a;
    b = b;
    add = (fun tmp -> complexConstructor (a +. tmp.a) (b +. tmp.b));
    mul = (fun tmp -> complexConstructor (a *. tmp.a -. b *. tmp.b) (a *. tmp.b +. tmp.a *. b));                                                         
  };; 

(* Exercice 4: *)
