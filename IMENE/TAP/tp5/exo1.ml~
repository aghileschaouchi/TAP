type value = 
  | Int of int 
  | Float of float;;

(*test: Int 3;; => value*)
  
let string_of_value x =
  match x with  (*= il y a deux possibilités: soit x est int soit x est float*)
  | Int i   -> string_of_int i;
  | Float f -> string_of_float f;;

(* exercice 1 *)
(* 1.1 *)
type weight =
  | Kilo of float
  | Livre of float
  | Carat of float;;

(* 1.2 *)
(*Le pattern matching n'est pas exhaustif. Il est nécessaire de préciser tous les cas possibles (dans notre cas, on doit gérer le kilo. *)
let rec compare_weight x =
  match x with
  | Kilo i -> i;
  | Livre i -> i /. 2.205 ; 
  | Carat i -> i /. 5000. ;;

(* test *)
let lv = Livre(12.4);;
  compare_weight (lv);;

(* 1.3 *)
let rec sum_of_values a b = match (a,b) with 
  | (Int i,Int j)     -> Int(i+j)
  | (Int i,Float f)   -> Float((float i)+.f)
  | (Float f,Int i)   -> Float((float i)+.f)
  | (Float f,Float g) -> Float (f+.g);;

type coin =
  |One (*ce qui n'est pas génial c'est d'avoir plusieurs représentations possibles sur un meme objet si on spécifie que c'est int.
cette manière représente les objets de maniere unique, donc la comparaison, par exemple, est simplifiée *)
  |Seven
  |Thirteen;; 

let rec glouton n =
  match n with
  | k when k>=13 -> Thirteen::glouton(k-13);
  | k when k>=7  -> Seven::glouton(k-7);
  | k when k>=1  -> One::glouton(k-1);
  | _ -> [];;
       
  glouton 21;;

(********* Exercice  2  *********)
  (*un arbre est soit un arbre vide, soit un noeud avec un fils droite et un fils gauche*)
type 'a bintree = 
| BinEmpty
| BinNode of 'a * 'a bintree * 'a bintree 

let rec bintree_build f h x = 
  if (h <= 0)
  then BinEmpty
  else let (x1,x2) = f(x) in 
          BinNode (x,
            (bintree_build f (h-1) x1),
            (bintree_build f (h-1) x2));;

(* 2.1 *)
let f x = (2*x , 2*x+1);;
(*pour bintree, h est la taille de l'arbre, et x est la valeur de départ. *)
  bintree_build f 3 1;;

(* 2.2 *)
let rec bintree_map f tree =
  match tree with
  | BinEmpty -> BinEmpty;
  | BinNode  (t,tl,tr) -> BinNode(f t, bintree_map f tl, bintree_map f tr );;

 
(* 2.3 *)

let rec bintree_insert tree n =
  match tree with
  |BinEmpty -> BinNode(n, BinEmpty,BinEmpty);
  |BinNode(t,tl,tr) ->
    
    if t<n then
      BinNode(k,tl,bintree_insert tr n); (*insert a droite de l'arbre*)
    else
    if t>n then
      BinNode(k,bintree_insert tl n,tr);;
    
(* 2.4 reponse sur papier*)  
(* 2.5 a faire *)
(* 2.6 bonus *)
type 'a tree =
  | TreeEmpty
  | TreeNode of 'a * (('a tree) list)

(* il faut transformer la liste des fils en nouvelle liste de fils. Avec map.*)
let rec tree_map f tree =
  match tree with
  | TreeEmpty -> TreeEmpty;
  | TreeNode(t,list) -> TreeNode (f t, List.map tree_map list);;

(*2.8 interesting *)
  
