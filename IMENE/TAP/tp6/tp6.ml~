(********* Exercice  2  *********)

type 'k key         = K of 'k
and ('k, 'a) vertex = 'k key * 'a
and ('k, 'a) graph  = Graph of (('k, 'a) vertex * 'k key list) list;;
 
let g = Graph ([
         ((K 1, "A"), [K 2; K 3]);
         ((K 2, "B"), [K 4; K 5]);
         ((K 3, "C"), [K 6; K 7]);
         ((K 4, "A"), []);
         ((K 5, "C"), []);
         ((K 6, "D"), []);
         ((K 7, "C"), []);
              ])
      
(* 1.1 *)
(* un sommet est une paire <clé,valeur> . La liste des voisins est une liste de clés.
Dans le graphe g, il y a une liste qu'on appelle 'l'.
l est une liste de voisins qu'on va vouloir transformer en une liste (clé, {ensemble de voisins de k} )
Premièrement on récupére la clé (sans la valeur). Pour cela, on fait un map sur le premier élément avec 'fst'. Exemple: ((K 1, "A") => (K 1) )
Ensuite on utilise List.assoc (de manière currifiée) qui prend la clé et donne une key list.
 *)

let rec graph_next g k =
  match g with
  | Graph l -> let asc = List.map (fun (u,v) -> (fst u,v)) l in
               List.assoc k asc;;

graph_next g (K 1);;
graph_next g (K 2);;
    
(* 1.2 *)
(* Le parcours en profondeur visite tous les sommets en passant à chaque fois par tous les voisins de chaque sommet visité.
 Si liste pas vide, on prend le premier élément à l'interieur, on regarde si il a déja été visité, on rajoute ses voisins dans la liste des sommets à visiter + on le rajoute dans la liste des visités.
 On s'arrête quand on a plus rien à visiter.
 On appelle list.rev pour une question d'affichage dans le bon ordre 
*)
let rec depth_traversal g tovisit visited =
  match tovisit with
  | [] -> List.rev visited
  | (x::xs) -> let xneight = graph_next g x in
             let ntovisit = if(List.mem x visited) then xs else (xneight@xs) in
             let nvisited = if(List.mem x visited) then visited else x::visited in
             depth_traversal g ntovisit nvisited;;

(* 1.3 *)
let rec breadth_traversal g tovisit visited =
  match tovisit with
  | [] -> List.rev visited
  | (x::xs) -> let xneigh = graph_next g x in
               let ntovisit = if (List.mem x visited) then xs else (xs@xneigh) in
               let nvisited = if (List.mem x visited) then visited else x::visited in
               breadth_traversal g ntovisit nvisited;;

(* Pour tester *)  
depth_traversal g [K 1] [];;

breadth_traversal g [K 1] [];;
  
(* 1.4 *)
type 'a strategy = Strategy of ('a -> 'a list -> 'a list -> 'a list) ;;

let strategy_breadth = Strategy (fun _ xs xneigh -> xneigh@xs);;

let strategy_depth = Strategy (fun _ xs xneigh -> xs@xneigh);;

let rec generic_traversal (Strategy s) g tovisit visited =
  match tovisit with
  | [] -> visited
  | (x::xs) -> let xneigh = graph_next g x in
	       let ntovisit = if (List.mem x visited) then xs else (s x xneigh xs) in
	       let nvisited = if (List.mem x visited) then visited else x::visited in generic_traversal (Strategy s) g ntovisit nvisited;;


(* Pour tester *)  
generic_traversal strategy_depth g [K 1] [];;

generic_traversal strategy_breadth g [K 1] [];;
  

(********* Exercice  1  *********)
(* contient une liste d'entrée et une liste de sortie *)
type 'a queue = Q of 'a list * 'a list;;  
 
(* 2.1 *)
let rec q_insert (Q(l1,l2)) x =
  Q(x::l1, l2);;

let file = List.fold_left q_insert (Q([],[])) [1;2;3;4];;
  
(* 2.2 *)
let rec q_transfer (Q(l1,l2)) =
  if (l2 == []) then
    Q([], List.rev l1)
  else
    Q(l1,l2) ;;

q_transfer file;;
  
(* 2.3 *)
let rec q_pop (Q(l1,l2)) =
  match l2 with
  | [] -> failwith "Liste vide"
  | x::xs -> Q(l1, xs);;

q_pop (q_transfer file);;


  (* Exercice 2 *)
type 'a queue = Q of 'a list * 'a list;;    
  
let q_insert (Q(insertL, popL)) elem =
  Q (elem::insertL, popL);;
  
let q_transfert (Q(insertL, popL)) = if popL == [] then
                                     Q([], List.rev insertL)
                                   else
                                     Q(insertL, popL);;
  (* Pour tester *)
  
  let my_q = List.fold_left q_insert (Q([],[])) [1;2;3;4];;

    
  let q_pop (Q(insertL, popL)) = match popL with
    | [] -> failwith "error"
    | x::xs -> Q(insertL, xs);;
